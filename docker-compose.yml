services:
  #Nginx Service
  nginx:
    platform: linux/amd64
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ../:/var/www:cached
      - ./config/nginx/:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
  php82:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PHP_VERSION: 8.2
        XDEBUG_ENABLE: true
        NODE_VERSION: 22
    image: php82
    container_name: php82
    volumes:
      - ../:/var/www:cached
      - ./config/php/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./config/php/php.ini:/usr/local/etc/php/php.ini
    expose:
      - 9000
      - 22
      - 21
    networks:
      - app-network
  php81:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PHP_VERSION: 8.1
        XDEBUG_ENABLE: true
        NODE_VERSION: 21
    image: php81
    container_name: php81
    volumes:
      - ../:/var/www:cached
      - ./config/php/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./config/php/php.ini:/usr/local/etc/php/php.ini
    expose:
      - 9000
      - 22
      - 21
    networks:
      - app-network
  php80:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PHP_VERSION: 8.0
        XDEBUG_ENABLE: true
        NODE_VERSION: 20
    image: php80
    container_name: php80
    volumes:
      - ../:/var/www:cached
      - ./config/php/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./config/php/php.ini:/usr/local/etc/php/php.ini
    expose:
      - 9000
    networks:
      - app-network
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-miniostorage}
      MINIO_REGION_NAME: ${MINIO_REGION_NAME:-us-east-1}
    command:
      - server
      - --console-address
      - :9001
      - /data
    networks:
      - app-network
  sqs:
    image: roribio16/alpine-sqs:latest
    container_name: alpine_sqs
    ports:
      - "9324:9324"
      - "9325:9325"
    environment:
      - SQS_QUEUE_NAME=test-queue
  #MySQL Service
  mariadb:
    image: mariadb:latest
    container_name: mariadb
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD:-root}"
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - mariadbdata:/var/lib/mysql/
      - ./reset.sql:/tmp/mysql-init.sql
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - postgresdata:/var/lib/postgres/
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-root}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
    ports:
      - "5432:5432"
    networks:
      - app-network

  #MSSQL Service
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_PASSWORD}
      - ACCEPT_EULA=Y

    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - app-network

  #Mail Service
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

  #Redis Service
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    networks:
      - app-network

  #Mongo Service
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "${MONGO_DATABASE_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
      MONGO_INITDB_DATABASE: "${MONGO_DATABASE}"
    volumes:
      - mongodata:/data
    networks:
      - app-network

  #Elasticsearch service
  elasticsearch:
    image: elasticsearch:7.17.10
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearchdata:/data
    hostname: elasticsearch
    cpu_shares: 512 # 0.5 CPU
    mem_limit: 536870912 # 512 MB RAM
    environment:
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=password
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - discovery.type=single-node

    networks:
      - app-network

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.4.3
    # environment:
    #   - ELASTICSEARCH_HOSTS=http://localhost:9200
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - app-network

  #RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    environment:
      - RABBITMQ_USERNAME=root
      - RABBITMQ_PASSWORD=password
    ports:
      - 5672:5672
      - 15672:15672
    #volumes:
    # - rabbitmqdata:/var/lib/rabbitmq
    #- rabbitmqlog:/var/log/rabbitmq
    networks:
      - app-network
  nextcloud:
    container_name: nextcloud
    image: nextcloud
    ports:
      - 8888:80
    volumes:
      - ./nextcloud:/var/www/html
  nats:
    container_name: nats
    image: bitnami/nats:latest
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222
    networks:
      - app-network

  json-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: json-server
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      - ./mock/magi-bff-mock-api-server/mock:/app/mock
      - ./mock/magi-bff-mock-api-server/server.js:/app/server.js
      - ./mock/magi-bff-mock-api-server/nodemon.json:/app/nodemon.json
    command: nodemon --exec "node server.js ${CLIENT:-default}"
    networks:
      - app-network
#Docker Networks
networks:
  app-network:
    driver: bridge

#Volumes
volumes:
  mariadbdata:
    driver: local
  redisdata:
    driver: local
  mongodata:
    driver: local
  elasticsearchdata:
    driver: local
  mssqldata:
    driver: local
  postgresdata:
    driver: local
  nextclouddata:
    driver: local
  sqsdata:
    driver: local
